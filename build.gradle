//file:noinspection GroovyAssignabilityCheck
plugins {
    id "io.github.juuxel.loom-quiltflower-mini" version "1.+" apply false
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.10.0-SNAPSHOT" apply false
    id "maven-publish"
}

version = rootProject.mod_version + "+" + rootProject.mc_major_version + System.getenv().SNAPSHOT

/*repositories {
    maven {url = "https://api.modrinth.com/maven"}
    maven {url = "https://maven.bai.lol"}
}*/

/*dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${minecraft_version}+build.${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${mc_major_version}"

    modImplementation include("maven.modrinth:stonecutter_recipe_tags:${srt_version}")

    // compile against the API
    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${wthit_version}"

    // run against the full jar
    modRuntime "mcp.mobius.waila:wthit:fabric-${wthit_version}"

    modImplementation "maven.modrinth:lazydfu:0.1.2" // Reduces start time
}*/

architectury {
    minecraft = "1.17.1"
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower-mini"

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // We use Yarn as of right now, may move to Mojmap or more likely Quilt Mappings later.
        mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.${rootProject.mappings_version}:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    // apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version

    tasks.withType(JavaCompile) { it.options.encoding = "UTF-8" }

    jar {
        from("LICENSE")
        exclude("**/upcoming/**")
        exclude("**/unused/**")
    }

    java {withSourcesJar()}
}

/*
processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.consistencyplus'
            artifactId = archivesBaseName
            version = version
            artifact(remapJar) { builtBy remapJar }
            artifact(sourcesJar) { builtBy remapSourcesJar }
        }
    }
    repositories {
        maven {
            name = "emmavenReleases"
            url = "https://maven.waffle.coffee/releases"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
        maven {
            name = "emmavenSnapshots"
            url = "https://maven.waffle.coffee/snapshots"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
 */
