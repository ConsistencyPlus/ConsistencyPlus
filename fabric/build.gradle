apply from: "../gradle/loader.gradle"

architectury.fabric()

configurations {
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url = "https://maven.terraformersmc.com"
        content { includeGroup "com.terraformersmc" }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi include("maven.modrinth:stonecutter_recipe_tags:${rootProject.scrt_version}")
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${rootProject.wthit_version}" // compile against the WTHIT API
    modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${rootProject.wthit_version}" // run against the full jar

    modRuntimeOnly "maven.modrinth:lazydfu:0.1.2"
    modRuntimeOnly "maven.modrinth:suggestionproviderfabric:1.0.1"
    modRuntimeOnly("com.terraformersmc:modmenu:3.2.1") {
        exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api"
    }

    if (project.use_third_party_mods && !System.getProperty("user.name").toLowerCase(Locale.ROOT).equals("carte")) {
        //modRuntimeOnly "maven.modrinth:sodium:mc1.17.1-0.3.2"
        //modRuntimeOnly "maven.modrinth:lithium:mc1.17.1-0.7.5"
    }

    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

sourceSets.main {
    resources {
        srcDirs += [
                'src/generated/resources'
        ]
    }
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

publishing.publications {
    mavenFabric(MavenPublication) from components.java
}
